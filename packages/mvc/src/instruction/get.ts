import { control } from '../control';
import { issues } from '../helper/issues';
import { Model } from '../model';
import { mayRetry } from '../suspense';
import { add } from './add';
import { computeMode } from './get.compute';
import { factoryMode } from './get.factory';

export const Oops = issues({
  PeerNotAllowed: (model, property) =>
    `Attempted to use an instruction result (probably use or tap) as computed source for ${model}.${property}. This is not possible.`,

  ComputeFailed: (model, key) =>
    `Generating initial value for ${model}.${key} failed.`,

  Failed: (parent, property, initial) =>
    `An exception was thrown while ${initial ? "initializing" : "refreshing"} [${parent}.${property}].`
});

declare namespace get {
  type Function<T, S = any> = (this: S, on: S) => T;
  type Factory<T, S = unknown> = (this: S, key: string, thisArg: S) => T;
}

/**
 * Implement a computed value; output will be generated by provided function.
 *
 * @param source - Source model from which computed value will be a subscriber.
 * @param compute - Compute function. Bound to a subscriber-proxy of source, returns output value. Will update automatically as input values change.
 * @param suspend - Value will throw suspense when evaulating to undefined.
 */
function get <R, T> (source: T, compute: (this: T, on: T) => R, suspend: true): Exclude<R, undefined>;
function get <R, T> (source: T, compute: (this: T, on: T) => R, suspend?: boolean): R;

/**
 * Implement a computed value; output is returned by function from provided factory.
 *
 * @param compute - Factory function to generate a getter to subscribe dependancies.
 * @param suspend - Value will throw suspense when evaulating to undefined.
 */
function get <R, T> (compute: (property: string, on: T) => (this: T, state: T) => R, suspend: true): Exclude<R, undefined>;
function get <R, T> (compute: (property: string, on: T) => (this: T, state: T) => R, suspend?: boolean): R;

/**
 * Set property with an async function.
 *
 * Property cannot be accessed until factory resolves, yeilding a result.
 * If accessed while processing, React Suspense will be thrown.
 *
 * - `required: true` (default) -
 *      Run factory immediately upon creation of model instance.
 * - `required: false` -
 *      Run factory only if/when accessed.
 *      Value will always throw suspense at least once - use with caution.
 *
 * @param factory - Callback run to derrive property value.
 * @param required - (default: true) Run factory immediately on creation, otherwise on access.
 */
function get <T> (factory: get.Factory<Promise<T>>, required: false): T | undefined;
function get <T, S> (factory: get.Factory<Promise<T>, S>, required: false): T | undefined;

function get <T> (factory: get.Factory<Promise<T>>, required?: boolean): T;
function get <T, S> (factory: get.Factory<Promise<T>, S>, required?: boolean): T;

/**
 * Set property with a factory function.
 *
 * - `required: true` (default) -
 *      Run factory immediately upon creation of model instance.
 * - `required: false` -
 *      Run factory only if/when accessed.
 *      Value will always throw suspense at least once - use with caution.
 *
 * @param factory - Callback run to derrive property value.
 * @param required - (default: true) Run factory immediately on creation, otherwise on access.
 */
function get <T>(factory: get.Factory<T>, required: false): T | undefined;
function get <T, S>(factory: get.Factory<T, S>, required: false): T | undefined;

function get <T>(factory: get.Factory<T>, required?: boolean): T;
function get <T, S>(factory: get.Factory<T, S>, required?: boolean): T;

/**
 * Assign a property with result of a promise.
 */
function get <T> (factory: Promise<T>, required: false): T | undefined;
function get <T> (factory: Promise<T>, required?: boolean): T;
 
function get<R, T>(
  arg0: ((this: T, key: string, thisArg: T) => get.Function<R, T> | T) | Promise<R> | Model,
  arg1?: get.Function<T> | boolean,
  arg2?: boolean): R {

  return add(
    function get(key){
      const { subject } = this;
      const computeRequired = arg1 === true || arg2 === true;
      const factoryRequired = arg1 !== false && arg2 !== false;

      let getter: () => any;

      // Easy mistake, using a peer, will always be unresolved.
      if(typeof arg0 == "symbol")
        throw Oops.PeerNotAllowed(subject, key);

      // if(typeof arg0 == "function" && /^[A-Z]/.test(arg0.name))
      //   throw Oops.BadSource(subject, key, arg0);

      this.state.set(key, undefined);

      const init = (): any => {
        let source = this;
        let setter: get.Function<T, any>;
 
        if(typeof arg0 == "function"){
          const result = mayRetry(arg0.bind(subject, key, subject));
  
          if(typeof result == "function")
            setter = result;
          else {
            getter = factoryMode(this, result, key, factoryRequired);
            return;
          }
        }
        else if(arg0 instanceof Promise){
          getter = factoryMode(this, arg0, key, factoryRequired);
          return;
        }
        else if(typeof arg1 == "function"){
          // replace source controller in-case it is different
          source = control(arg0);
          setter = arg1;
        }
        else
          throw new Error(`Factory argument cannot be ${arg1}`);

        getter = computeMode(this, source, setter, key, computeRequired);
      }

      if(typeof arg0 == "function" && computeRequired)
        try {
          init();
        }
        catch(err){
          Oops.ComputeFailed(subject, key).warn();
          throw err;
        }

      return () => {
        if(!getter)
          init();

        return getter();
      }
    }
  )
}

export { get }